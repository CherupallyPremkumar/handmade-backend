<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.homebase.admin.mapper.OrderMapper">

    <!-- Result Map for Order with Items -->
    <resultMap id="OrderWithItemsMap" type="com.homebase.admin.entity.Order">
        <id property="id" column="id"/>
        <result property="orderNumber" column="order_number"/>
        <result property="customerName" column="customer_name"/>
        <result property="customerEmail" column="customer_email"/>
        <result property="customerPhone" column="customer_phone"/>
        <result property="shippingAddress" column="shipping_address"/>
        <result property="subtotal" column="subtotal"/>
        <result property="tax" column="tax"/>
        <result property="shippingCost" column="shipping_cost"/>
        <result property="total" column="total"/>
        <result property="status" column="status"/>
        <result property="paymentStatus" column="payment_status"/>
        <result property="transactionId" column="transaction_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="tenantId" column="tenant_id"/>
        
        <!-- Collection of order items -->
        <collection property="items" ofType="com.homebase.admin.entity.OrderItem">
            <id property="id" column="item_id"/>
            <result property="quantity" column="item_quantity"/>
            <result property="price" column="item_price"/>
        </collection>
    </resultMap>

    <!-- Get order with all items -->
    <select id="getOrderWithItems" resultMap="OrderWithItemsMap">
        SELECT 
            o.*,
            oi.id as item_id,
            oi.quantity as item_quantity,
            oi.price as item_price
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.id = #{orderId}
        AND o.tenant_id = #{tenantId}
    </select>

    <!-- Complex query: Get orders with revenue breakdown -->
    <select id="getOrdersWithRevenueBreakdown" resultType="map">
        SELECT 
            o.id,
            o.order_number,
            o.customer_name,
            o.total,
            o.status,
            o.created_at,
            COUNT(oi.id) as item_count,
            SUM(oi.quantity) as total_items,
            (SELECT COUNT(*) FROM orders WHERE customer_email = o.customer_email AND tenant_id = #{tenantId}) as customer_order_count
        FROM orders o
        LEFT JOIN order_items oi ON o.id = oi.order_id
        WHERE o.tenant_id = #{tenantId}
        <if test="startDate != null">
            AND o.created_at >= #{startDate}
        </if>
        <if test="endDate != null">
            AND o.created_at &lt;= #{endDate}
        </if>
        GROUP BY o.id, o.order_number, o.customer_name, o.total, o.status, o.created_at, o.customer_email
        ORDER BY o.created_at DESC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- Get daily sales report -->
    <select id="getDailySalesReport" resultType="map">
        SELECT 
            DATE(created_at) as sale_date,
            COUNT(*) as order_count,
            SUM(total) as total_revenue,
            AVG(total) as average_order_value,
            COUNT(DISTINCT customer_email) as unique_customers
        FROM orders
        WHERE tenant_id = #{tenantId}
        AND status IN ('CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED')
        AND payment_status = 'PAID'
        AND created_at BETWEEN #{startDate} AND #{endDate}
        GROUP BY DATE(created_at)
        ORDER BY sale_date DESC
    </select>

    <!-- Get customer lifetime value -->
    <select id="getCustomerLifetimeValue" resultType="map">
        SELECT 
            customer_email,
            customer_name,
            COUNT(*) as total_orders,
            SUM(total) as lifetime_value,
            AVG(total) as average_order_value,
            MIN(created_at) as first_order_date,
            MAX(created_at) as last_order_date
        FROM orders
        WHERE tenant_id = #{tenantId}
        AND status NOT IN ('CANCELLED', 'PAYMENT_FAILED')
        GROUP BY customer_email, customer_name
        HAVING COUNT(*) > 1
        ORDER BY lifetime_value DESC
        LIMIT #{limit}
    </select>

</mapper>
